% this routine can be used to calculate the autocorrelation length of MCMC samples.

%in order to run properly, two mat file should already exist
%PTsampling.mat should be generated by parallel tempering code, named PTmcmc.m , while sampling.mat should be generated by mixed MCMC code, called mixMCMC.m .

function acl=acl_calculate(NumOfParam)

if nargin==0
	NumOfParam=1;
	fprintf('No specific parameter is chosen, default is for the 1st parameter, amplitude\n');
end

switch NumOfParam
	case 1
		fprintf('chose first parameter, amplitude\n');
	case 2
		fprintf('chose second parameter, phase\n');
	otherwise
		fprintf('Wrong input! You should choose from 1: amplitude and 2: phase.\n');
end

load PTsampleing.mat

s = fitoptions('Method','NonlinearLeastSquares',...
	               'Lower',[-Inf],...
	               'Upper',[0],...
	               'Startpoint',[-10]);
f = fittype('exp(a*x)','options',s);

chains = permute(chains,[2,3,1]);
chains = chains(:,:,1);

[ACF, lags, bounds] = autocorr(chains(NumOfParam,:),2000);
curve=fit(lags',ACF',f);
acl(1) = round(-1/curve.a); 
clearvars -except acl NumOfParam s f;

load sampleing.mat
[ACF, lags, bounds] = autocorr(chain(:,NumOfParam),20);
curve=fit(lags,ACF,f);
acl(2) = round(-1/curve.a);
fprintf('the first value represent the autocorrelation length for parallel tempering, and the second represent the acl for mixed MCMC');

%format long g

return;

